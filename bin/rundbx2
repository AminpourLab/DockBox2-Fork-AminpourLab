#!/usr/bin/env python
import os
import sys
import argparse
import time
import random
import numpy as np

os.environ['TF_CPP_MIN_LOG_LEVEL'] = str(2)
os.environ['PYTHONHASHSEED'] = str(2)

from dockbox2.datasets import *
from dockbox2 import dbxconfig

from dockbox2 import models
from dockbox2.utils import *

import tensorflow as tf

# command-line arguments and options
parser = argparse.ArgumentParser(description="Run DBX2 GNN model")

parser.add_argument('-f',
    dest='config_file',
    required=True,
    metavar='FILE',
    help='config file containing model parameters')

parser.add_argument('-t',
    type=str,
    dest='pickfile',
    metavar='FILE',
    required=True,
    help='pickle file containing graphs of poses')

parser.add_argument('-w',
    dest='h5file',
    required=True,
    metavar='FILE',
    help='h5 file containing trained weights')

parser.add_argument('-o',
    dest='output_file',
    required=False,
    metavar='FILE',
    default='dbx2.score',
    help='File where dbx2 scores are listed')

parser.add_argument('--seed',
    dest='seed',
    default=None,
    metavar='INT',
    type=int,
    help='Random seed')

parser.add_argument('--task',
    dest='task_level',
    default=['node'],
    nargs='+',
    required=False,
    help="task-level prediction: node (pose correctness) and/or graph (pKd values)")

# update parsers with arguments
args = parser.parse_args()

# check task level
task_level = list(dict.fromkeys(args.task_level))
task_level = sorted(task_level, reverse=True)

if all(task not in task_level for task in ['node', 'graph']):
    raise ValueError("Task level should be node and/or graph")

if task_level == ['node', 'graph']:
    suffix, ext = os.path.splitext(args.output_file)
    node_output_file = suffix + '_node' + ext
    graph_output_file = suffix + '_graph' + ext

elif task_level == ['node']:
    node_output_file = args.output_file
    graph_output_file = None

else:
    node_output_file = None
    graph_output_file = args.output_file

if args.seed is not None:
    seed = args.seed
else:
    seed = random.randint(0, 1e10)
    print("random seed is set to %i"%seed)
set_seed(args.seed)

config = dbxconfig.ConfigSetup(args.config_file, args.pickfile, task_level)

depth = config.depth
classifier = config.classifier
nrof_neigh = config.nrof_neigh
use_edger = config.use_edger

weighting = config.weighting
pkd_model = config.pkd_model

dataset = GraphDataset(args.pickfile, config.node, config.edger, task_level, pkd_model, training=False)
data_loader, data_slices = generate_data_loader(dataset, depth, nrof_neigh, **config.minibatch, randomize=False)

model = models.GraphSAGE(dataset.nfeats, dataset.nlabels, depth, nrof_neigh, use_edger, config.loss, config.aggregator, \
    config.classifier, config.readout, config.node, attention_options=config.gat, edger_options=config.edger, task_level=task_level, weighting=weighting)
model.build()

model.load_weights_h5(args.h5file)
node_labels, pred_node_labels, best_node_labels, pred_best_node_labels, is_correct_labels, graph_labels, pred_graph_labels, \
                graph_size = (None, None, None, None, None, None, None, None)

for idx_batch, data_batch in enumerate(data_loader):
    batch_node_labels, batch_pred_node_labels, batch_best_node_labels, batch_pred_best_node_labels, batch_is_correct_labels, \
        batch_graph_labels, batch_pred_graph_labels, batch_graph_size = model(*data_batch, training=False)

    is_first = True if idx_batch == 0 else False

    if 'node' in task_level:
        node_labels = append_batch_results(node_labels, batch_node_labels, first=is_first)
        pred_node_labels = append_batch_results(pred_node_labels, batch_pred_node_labels, first=is_first)

        best_node_labels = append_batch_results(best_node_labels, batch_best_node_labels, first=is_first)
        pred_best_node_labels = append_batch_results(pred_best_node_labels, batch_pred_best_node_labels, first=is_first)

        is_correct_labels = append_batch_results(is_correct_labels, batch_is_correct_labels, first=is_first)

    if 'graph' in task_level:
        graph_labels = append_batch_results(graph_labels, batch_graph_labels, first=is_first)
        pred_graph_labels = append_batch_results(pred_graph_labels, batch_pred_graph_labels, first=is_first)

    graph_size = append_batch_results(graph_size, batch_graph_size, first=is_first)

if 'node' in task_level:
    # saving output predictions
    with open(node_output_file, 'w') as outf:
        graph_cumsize = np.insert(np.cumsum(graph_size), 0, 0)
 
        for kdx in range(len(graph_size)):
            if kdx != 0:
                outf.write('\n')
            pred_node_labels_cg = tf.gather(pred_node_labels, tf.range(graph_cumsize[kdx], graph_cumsize[kdx+1]))
            node_labels_cg = tf.gather(node_labels, tf.range(graph_cumsize[kdx], graph_cumsize[kdx+1]))
 
            for jdx, pred_label in enumerate(pred_node_labels_cg):
                if dataset.node_labels is not None:
                    outf.write('%-8.5f %4i\n'%(pred_label, node_labels_cg[jdx]))
                else:
                    outf.write('%-8.5f\n'%pred_label)

if 'graph' in args.task_level:
    with open(graph_output_file, 'w') as outf:
        for jdx, pred_label in enumerate(pred_graph_labels):

                if dataset.graph_labels is not None:
                    outf.write('%-8.5f %6.2f\n'%(pred_label, graph_labels[jdx]))
                else:
                    outf.write('%-8.5f\n'%pred_label)

results = {}
if 'node' in task_level and dataset.node_labels is not None:
    tpr, tnr, accuracy, auc, threshold = model.roc_metrics(best_node_labels, pred_best_node_labels, is_correct_labels)
    success_rate = model.success_rate(best_node_labels, pred_best_node_labels, is_correct_labels)

    results['success_rate'] = "%.1f"%success_rate
    results['accuracy'] = "%.1f"%accuracy
    results['tpr'] = "%.3f"%tpr
    results['tnr'] = "%.3f"%tnr

    results['auc'] = "%.3f"%auc
    results['threshold'] = "%.3f"%threshold

if 'graph' in task_level and dataset.graph_labels is not None:
    if pkd_model == 'regression':

        results['pearson'] = "%.3f"%model.pearson(graph_labels, pred_graph_labels)
        results['r_squared_value'] = "%.3f"%model.r_squared_value(graph_labels, pred_graph_labels)

        results['rmse'] = "%.3f"%model.rmse(graph_labels, pred_graph_labels)
        results['std'] = "%.3f"%model.std(graph_labels, pred_graph_labels)
    else:
        tpr_g, tnr_g, auc_g, threshold_g = model.roc_metrics_graph(graph_labels, pred_graph_labels) 

        results['tpr_g'] = "%.3f"%tpr_g
        results['tnr_g'] = "%.3f"%tnr_g

        results['auc_g'] = "%.3f"%auc_g
        results['threshold_g'] = "%.3f"%threshold_g

for key, value in results.items():
    print("%s: %s"%(key, value))
